
#pragma config(Motor,  motorA,          claw,          tmotorEV3_Large, PIDControl, encoder)
#pragma config(Motor,  motorB,          leftMotor,     tmotorEV3_Large, PIDControl, driveLeft, encoder)
#pragma config(Motor,  motorC,          rightMotor,    tmotorEV3_Large, PIDControl, driveRight, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

//!!Code automatically generated by 'ROBOTC' configuration wizard               !!//
#define PI 3.141592654

task main()
{
	int btn = 0;
	int startbtn = 0;
	int i = 0;
	int j = 3;
	float distancevalue, rad, angle, distance;
	int m = 0;

	int x = 0;
	int y = 0;

	displayCenteredTextLine(1, "- Enter Point Location -");

	while(i < 1){
		while(startbtn == 0){
			displayTextLine(4, "x: %d", x);
			if(getButtonPress(buttonRight)){
				btn = 1;
				sleep(500);
			}
			if(getButtonPress(buttonLeft)){
				btn = 2;
				sleep(500);
			}
			if(btn == 1){
				x = x + 1;
				displayTextLine(4, "x: %d", x);
				btn = 0;
			}
			if(btn == 2){
				x = x - 1;
				displayTextLine(4, "x: %d", x);
				btn = 0;
			}
			if(getButtonPress(buttonEnter)){
				startbtn = startbtn + 1;
				j++;
				sleep(500);
			}
		}

		while(startbtn == 1){
			displayTextLine(5, "y: %d", y);
			if(getButtonPress(buttonRight)){
				btn = 1;
				sleep(500);
			}
			if(getButtonPress(buttonLeft)){
				btn = 2;
				sleep(500);
			}
			if(btn == 1){
				y = y + 1;
				displayTextLine(5, "y: %d", y);
				btn = 0;
			}
			if(btn == 2){
				y = y - 1;
				displayTextLine(5, "y: %d", y);
				btn = 0;
			}
			if(getButtonPress(buttonEnter)){
				startbtn = startbtn - 1;
				j++;
				sleep(500);
			}

		}
		i++;
	}

	while(!(getButtonPress(buttonEnter))){
		displayCenteredTextLine(11, "Press Enter to Continue...");
	}

	sleep(1500);

	if(y == 0){
		sleep(1500);
		setMotorSyncEncoder(leftMotor, rightMotor, 100, 90*2.7, 50);
		sleep(1500);
		distancevalue = (360*x*30)/17.28;
		moveMotorTarget(leftMotor, distancevalue, 50);
		moveMotorTarget(rightMotor, distancevalue, 50);

		//Delay the program until both motors complete their movements.
		waitUntilMotorStop(leftMotor);
		waitUntilMotorStop(rightMotor);
	}
	else if(x == 0){
		distancevalue = (360*y*30)/17.28;
		moveMotorTarget(leftMotor, distancevalue, 50);
		moveMotorTarget(rightMotor, distancevalue, 50);

		//Delay the program until both motors complete their movements.
		waitUntilMotorStop(leftMotor);
		waitUntilMotorStop(rightMotor);
	}
	else{
		sleep(1500);
		rad = atan(x/y);
		angle = (rad * 180) / PI;
		distance = sqrt(pow(x, 2) + pow(y, 2));


		setMotorSyncEncoder(leftMotor, rightMotor, 100, angle*2.7, 50);
		sleep(1500);
		distancevalue = (360*distance*30)/17.28;
		moveMotorTarget(leftMotor, distancevalue, 50);
		moveMotorTarget(rightMotor, distancevalue, 50);

		//Delay the program until both motors complete their movements.
		waitUntilMotorStop(leftMotor);
		waitUntilMotorStop(rightMotor);
	}


}
