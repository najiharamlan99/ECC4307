#pragma config(Motor,  motorA,          claw,          tmotorEV3_Large, PIDControl, encoder)
#pragma config(Motor,  motorB,          leftMotor,          tmotorEV3_Large, PIDControl, driveLeft, encoder)
#pragma config(Motor,  motorC,          rightMotor,         tmotorEV3_Large, PIDControl, driveRight, encoder)
//!!Code automatically generated by 'ROBOTC' configuration wizard               !!//

task main()
{
	int btn = 0;
	int startbtn = 0;
	int i = 0;
	int j = 3;
	float distancevalue;

	float A[3] = {0,0,0};
	float dist[3] = {0,0,0};

	displayCenteredTextLine(1, "- Enter Point Location -");

	while(i < 3){
		while(startbtn == 0){
			displayTextLine(j, "A%d: %d", i+1, A[i]);
			if(getButtonPress(buttonRight)){
				btn = 1;
				sleep(500);
			}
			if(getButtonPress(buttonLeft)){
				btn = 2;
				sleep(500);
			}
			if(btn == 1){
	      A[i] = A[i] + 5;
	      displayTextLine(j, "A%d: %d", i+1, A[i]);
	      btn = 0;
	    }
	    if(btn == 2){
	      A[i] = A[i] - 5;
	      displayTextLine(j, "A%d: %d", i+1, A[i]);
	      btn = 0;
	    }
	    if(getButtonPress(buttonEnter)){
	    	startbtn = startbtn + 1;
	    	j++;
	    	sleep(500);
	    }
		}

		while(startbtn == 1){
			displayTextLine(j, "D%d: %d", i+1, dist[i]);
			if(getButtonPress(buttonRight)){
				btn = 1;
				sleep(500);
			}
			if(getButtonPress(buttonLeft)){
				btn = 2;
				sleep(500);
			}
			if(btn == 1){
	      dist[i] = dist[i] + 5;
	      displayTextLine(j, "A%d: %d", i+1, dist[i]);
	      btn = 0;
	    }
	    if(btn == 2){
	      dist[i] = dist[i] - 5;
	      displayTextLine(j, "A%d: %d", i+1, dist[i]);
	      btn = 0;
	    }
	    if(getButtonPress(buttonEnter)){
	    	startbtn = startbtn - 1;
	    	j++;
	    	sleep(500);
	    }

		}
	i++;
	}

	while(!(getButtonPress(buttonEnter))){
	displayCenteredTextLine(11, "Press enter to continue...");
	}

	int m = 0;

	while(m < 3){
	if(A[m] < 0){
			if(dist[m] < 0){
				sleep(1500);
				setMotorSyncEncoder(leftMotor, rightMotor, -100, -(A[m]*2.7), 50);
				sleep(1500);
				distancevalue = dist[m]*20.83;
				moveMotorTarget(leftMotor, distancevalue, -50);
				moveMotorTarget(rightMotor, distancevalue, -50);
				sleep(1500);
			}
			else{
				sleep(1500);
				setMotorSyncEncoder(leftMotor, rightMotor, -100, -(A[m]*2.7), 50);
				sleep(1500);
				distancevalue = dist[m]*20.83;
				moveMotorTarget(leftMotor, distancevalue, 50);
				moveMotorTarget(rightMotor, distancevalue, 50);
				sleep(1500);
			}
	}
	else{
			if(dist[m] < 0){
				sleep(1500);
				setMotorSyncEncoder(leftMotor, rightMotor, 100, A[m]*2.7, 50);
				sleep(1500);
				distancevalue = dist[m]*20.83;
				moveMotorTarget(leftMotor, distancevalue, -50);
				moveMotorTarget(rightMotor, distancevalue, -50);
				sleep(1500);
			}
			else{
				sleep(1500);
				setMotorSyncEncoder(leftMotor, rightMotor, 100, A[m]*2.7, 50);
				sleep(1500);
				distancevalue = dist[m]*20.83;
				moveMotorTarget(leftMotor, distancevalue, 50);
				moveMotorTarget(rightMotor, distancevalue, 50);
				sleep(1500);
			}


	}
	m++;
}


}
